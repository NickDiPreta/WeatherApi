{"version":3,"sources":["components/Form.js","components/Stats.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","handleSubmit","htmlFor","type","value","zipcode","onChange","id","Stats","class","hotcold","temperature","description","maxtemp","mintemp","App","useState","getZipcode","place","setPlace","setTemperature","setDescription","setMinTemp","setMaxTemp","setHotCold","event","a","preventDefault","handleSearch","fetch","res","console","log","json","cod","name","main","temp","desc","weather","temp_min","temp_max","className","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oOAceA,G,MAXF,SAACC,GAEV,OACI,0BAAMC,SAAUD,EAAME,cAClB,2BAAOC,QAAQ,SAAf,iBACA,2BAAOC,KAAK,OAAOC,MAAOL,EAAMM,QAASC,SAAUP,EAAMO,SAAUC,GAAG,QACtE,2BAAOJ,KAAK,cCITK,EAXD,SAAAT,GACV,OACI,4BACA,wBAAIU,MAAOV,EAAMW,SAAUX,EAAMY,aACjC,4BAAKZ,EAAMa,aACX,4BAAKb,EAAMc,SACX,4BAAKd,EAAMe,WC8DJC,MAjEf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNX,EADM,KACGY,EADH,OAEaD,mBAAS,IAFtB,mBAENE,EAFM,KAECC,EAFD,OAGyBH,mBAAS,IAHlC,mBAGNL,EAHM,KAGOS,EAHP,OAIyBJ,mBAAS,IAJlC,mBAINJ,EAJM,KAIOS,EAJP,OAKiBL,mBAAS,IAL1B,mBAKNF,EALM,KAKGQ,EALH,OAMiBN,mBAAS,IAN1B,mBAMNH,EANM,KAMGU,EANH,OAOiBP,mBAAS,IAP1B,mBAONN,EAPM,KAOGc,EAPH,KASPvB,EAAY,uCAAG,WAAOwB,GAAP,SAAAC,EAAA,sDACnBF,EAAW,IACXC,EAAME,iBACNC,EAAavB,GAHM,2CAAH,sDAMZuB,EAAY,uCAAG,WAAOvB,GAAP,qBAAAqB,EAAA,6DACfR,EADe,8DACgDb,EADhD,sEAEDwB,MAAMX,GAFL,cAEbY,EAFa,OAGnBC,QAAQC,IAAIF,GAHO,SAIAA,EAAIG,OAJJ,UAIbA,EAJa,OAKJ,IAAX5B,GAA6B,OAAZ4B,EAAKC,IALP,wBAMjBf,EAASc,EAAKE,MACdf,EAAea,EAAKG,KAAKC,MACrBJ,EAAKG,KAAKC,KAAO,GACnBb,EAAW,OACFS,EAAKG,KAAKC,KAAO,IAC1Bb,EAAW,QAETc,EAAOL,EAAKM,QAChBlB,EAAeiB,EAAK,GAAG1B,aACvBU,EAAWW,EAAKG,KAAKI,UACrBjB,EAAWU,EAAKG,KAAKK,UAhBJ,2BAmBjBtB,EAAS,yBAnBQ,4CAAH,sDAyBlB,OACE,yBAAKuB,UAAU,OACb,uCAEA,kBAAC,EAAD,CACEzC,aAAcA,EACdK,SATe,SAACmB,GACpBR,EAAWQ,EAAMkB,OAAOvC,QASpBC,QAASA,IAGT,6BACE,4BAAKa,GAAY,IACjB,kBAAC,EAAD,CACER,QAASA,EACTG,QAASA,EACTC,QAASA,EACTF,YAAaA,EACbD,YAAaA,IACZ,OCnDOiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a","file":"static/js/main.8a2a290e.chunk.js","sourcesContent":["import React, {useState} from 'react'\n\n\nconst Form = (props) =>{\n    \n    return(\n        <form onSubmit={props.handleSubmit}>\n            <label htmlFor=\"entry\">Enter zipcode</label>\n            <input type='text' value={props.zipcode} onChange={props.onChange} id=\"zip\"/>\n            <input type=\"submit\"/>\n        </form>\n    );\n};\n\nexport default Form","import React from 'react'\n\nconst Stats = props => {\n    return(\n        <ul>\n        <li class={props.hotcold}>{props.temperature}</li>\n        <li>{props.description}</li>\n        <li>{props.maxtemp}</li>\n        <li>{props.mintemp}</li>\n      </ul>\n    )\n}\n\nexport default Stats","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/Form\";\nimport Stats from \"./components/Stats\";\n\nfunction App() {\n  const [zipcode, getZipcode] = useState(\"\");\n  const [place, setPlace] = useState(\"\");\n  const [temperature, setTemperature] = useState(\"\");\n  const [description, setDescription] = useState([]);\n  const [mintemp, setMinTemp] = useState(\"\");\n  const [maxtemp, setMaxTemp] = useState(\"\");\n  const [hotcold, setHotCold] = useState(\"\");\n\n  const handleSubmit = async (event) => {\n    setHotCold(\"\");\n    event.preventDefault();\n    handleSearch(zipcode);\n  };\n\n  const handleSearch = async (zipcode) => {\n    let place = `https://api.openweathermap.org/data/2.5/weather?zip=${zipcode},us&units=imperial&appid=0cc0c4e42aeec28e41c2d533ce7a5bf5`;\n    const res = await fetch(place);\n    console.log(res);\n    const json = await res.json();\n    if (zipcode != \"\" && json.cod != \"404\") {\n      setPlace(json.name);\n      setTemperature(json.main.temp);\n      if (json.main.temp > 90) {\n        setHotCold(\"hot\");\n      } else if (json.main.temp < 40) {\n        setHotCold(\"cold\");\n      }\n      let desc = json.weather;\n      setDescription(desc[0].description);\n      setMinTemp(json.main.temp_min);\n      setMaxTemp(json.main.temp_max);\n      return;\n    } else {\n      setPlace(\"ENTER A VALID ZIPCODE\");\n    }\n  };\n  const handleChange = (event) => {\n    getZipcode(event.target.value);\n  };\n  return (\n    <div className=\"App\">\n      <h1>Weather</h1>\n\n      <Form\n        handleSubmit={handleSubmit}\n        onChange={handleChange}\n        zipcode={zipcode}\n      />\n      \n        <div>\n          <h1>{place}</h1>{\" \"}\n          <Stats\n            hotcold={hotcold}\n            maxtemp={maxtemp}\n            mintemp={mintemp}\n            description={description}\n            temperature={temperature}\n          />{\" \"}\n        </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}